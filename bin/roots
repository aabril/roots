#!/usr/bin/env node

var fs = require('fs'),
    path = require('path'),
    colors = require('colors'),
    compiler = require('../lib/compile-project'),
    server = require('../lib/server'),
    debug = require('../lib/debug'),
    ncp = require('ncp').ncp,
    argv = require('optimist').argv,
    watcher = require('../lib/watcher');


var current_directory = path.normalize(process.cwd());

var run_other_tasks = function(){

  // --------------------------------------------------------------------------
  // watch task (default)
  // --------------------------------------------------------------------------

  if (argv._[0] === 'watch' || argv._[0] == undefined) {
    // rimraf public
    
    // add in the livereload function
    options.locals.livereload = "<script>" + fs.readFileSync(path.join(__dirname, '../lib/reload.js'), 'utf8') + "</script>"

    // the error happened here --
    // the project is compiled once before serving, and you
    // weren't catching the error here as well. we do need
    // to figure out what to serve if it happens here though rather
    // than while it's watching. probably some custom error page that
    // we make that just shows the error and injects the livereload
    // function so that it automatically gets fixed

    compiler.compile_project(options, function(err){
      console.log("ERRRARRRRR".red);
    });

    server.start(current_directory);
    watcher.watchDirectories(["./" + options.folder_config.views,
                              "./" + options.folder_config.assets], function() {
                                compiler.compile_project(options, function(err) {
                                  if (err) {
                                    console.log("ERRROR".red);
                                  } else {
                                    console.log('\nreloading page'.red);
                                    server.reload();
                                  }
                                });
                            });
  }

  // --------------------------------------------------------------------------
  // compile task
  // --------------------------------------------------------------------------

  else if (argv._[0] === 'compile') {
    // rimraf public

    // also happens here for the one time compile. we might want to wrap
    // the compile and error handling so that it's not repeated, as it is on this
    // page three times.
    // ...or we could push the error handling back into the compile-project file
    compiler.compile_project(options, function(err){
      console.log("ERRRARRRRR".red);
    });
  }

  // --------------------------------------------------------------------------
  // deploy task
  // --------------------------------------------------------------------------

  else if (argv._[0] === 'deploy') {
    var run = require('child_process').exec
    // check to see if heroku is installed
    run('which heroku', function(err, out, stderr){
      if (err) {
        console.log("You need to install heroku first. Here's the download page".red)
        setTimeout(function(){ require('open')('https://toolbelt.heroku.com/') }, 700)
      } else {
        // check if there is alread a heroku app
        run("git branch -r | grep heroku", function(err,out,stdout){
          if (err) {
            console.log('creating app on heroku...'.green);
            var name = argv._[1]
            if (name == undefined) { name = "" }
            // run('heroku create ' + name, function(err, out, stderr){
            //   console.log('new heroku app created');
            //   should run `heroku open` here as well
            // });
          } else {
            // run("git rev-parse --abbrev-ref HEAD", function(err, branch, stdout){
              // run('git push heroku ' + branch, function(err, out, stderr){
              // // need to parse the output to grab the url here if possible
              //   console.log('deployed to heroku at (url)');
              // });
            // });
          }
        })
      }
    })
  }
}

// --------------------------------------------------------------------------
// new task
// --------------------------------------------------------------------------

if (argv._[0] === 'new') {
  if (!argv._[1]) { return console.log('\nyou must specify a name for your project\n'.red); }

  var source = path.join(__dirname, '../lib/template');
  var destination = path.join(current_directory, argv._[1]);

  ncp(source, destination, function (err) {
   if (err) { return console.error(err); }
   console.log('\nnew project created at /'.green + argv._[1].green + '\n');
  });
}

// --------------------------------------------------------------------------
// set the config variables from app.coffee
// --------------------------------------------------------------------------

else if (fs.existsSync(current_directory + '/app.coffee')) {
  require('coffee-script');
  var options = require(current_directory + '/app.coffee'); // pull the app config file

  // hard coded until a plugin interface is developed
  options.file_types = {}
  options.file_types.html = ['jade', 'ejs', 'html'];
  options.file_types.css = ['styl', 'css'];
  options.file_types.js = ['coffee', 'js'];

  // make sure all layout files are ignored
  for (var key in options.layouts){
    options.ignore_files.push(new RegExp(options.layouts[key]));
  }

  // set the debug flag
  debug.set_debug(options.debug)

  // add any additional globally available locals here
  // - range(1, 100).forEach

  // livereload function won't render anything unless in watch mode
  options.locals.livereload = ""

  run_other_tasks()

} else if (!fs.existsSync(current_directory + '/app.coffee')) {
  // if there's no app.coffee file, chances are you aren't in a roots project
  console.log("\nnot a roots project - run `roots help` if you are confused\n".yellow);
}

// --------------------------------------------------------------------------
// help task
// --------------------------------------------------------------------------

if (argv._[0] === 'help') {
  console.log("");
  console.log("Need some help? Here's what you can do with the roots command line tool:");
  console.log("");

  process.stdout.write("- ");
  process.stdout.write("new `name`: ".bold);
  process.stdout.write("create a new project structure in the current directory\n- ");
  // also run git init automatically on roots new

  process.stdout.write("compile: ".bold);
  process.stdout.write("compile your project once to the public folder\n- ");

  process.stdout.write("watch: ".bold);
  process.stdout.write("watch your project, compile when changes occur, and live reload\n- ");

  process.stdout.write("deploy `name`: ".bold);
  process.stdout.write("deploy your project to heroku (requires heroku gem)\n");

  // consider adding roots open and roots open remote

  console.log("");
  console.log("...and by all means check out [docs link] for more help!");
  console.log("");
}